package definitions

import (
	"github.com/go-streamline/interfaces/utils"
	"github.com/google/uuid"
	"io"
)

// EngineFlowObject represents the flow of data through the engine, containing metadata for the processing context.
type EngineFlowObject struct {
	Metadata map[string]interface{} `json:"metadata"`
}

// EvaluateExpression evaluates a string expression using the metadata in the EngineFlowObject.
// It will turn any `${expression}` into the value of the expression using [expr](https://github.com/expr-lang/expr).
// To access the metadata, use the `$env` variable. For example, `${$env["key"]}`.
// Additional functions are available:
//   - `uuid()`: Generates a new UUID.
//   - `random(max)`: Generates a random number between 0 and max.
//   - `getEnv(key)`: Retrieves an environment variable by key.
//
// Parameters:
//   - input: The string expression to evaluate.
//
// Returns:
//   - A string containing the evaluated result.
//   - An error if the evaluation fails.
func (e *EngineFlowObject) EvaluateExpression(input string) (string, error) {
	return utils.EvaluateExpression(input, e.Metadata)
}

// EngineIncomingObject represents an incoming object for the engine to process, including metadata, a data reader, and a session ID.
type EngineIncomingObject struct {
	FlowID    uuid.UUID
	Metadata  map[string]interface{}
	Reader    io.Reader
	SessionID uuid.UUID
}

// EngineFileHandler defines the interface for handling files in the engine's processing flow.
type EngineFileHandler interface {
	// GetInputFile returns the file path of the input file being processed.
	GetInputFile() string

	// GetOutputFile returns the file path of the output file generated by the processing.
	GetOutputFile() string

	// Close closes any resources associated with the file handler.
	Close()

	// GenerateNewFileHandler creates and returns a new file handler, typically used for handling parallel processing paths.
	// Returns:
	//   - A new instance of EngineFileHandler.
	//   - An error if the operation fails.
	GenerateNewFileHandler() (EngineFileHandler, error)
}

// SessionUpdate represents the update status of a session being processed by the engine.
type SessionUpdate struct {
	SessionID uuid.UUID `json:"session_id"`
	Finished  bool      `json:"finished"`
	Error     error     `json:"error"`
}

type EngineInterface interface {
	Submit(flowID uuid.UUID, metadata map[string]interface{}, reader io.Reader) uuid.UUID
	SessionUpdates() <-chan SessionUpdate
}
